=begin
#API Documentation | Printful

## About the Printful API  The Printful API is a RESTful API, that uses an HTTP protocol for communication. HTTP GET, POST, PUT and DELETE methods are used to access the API resources.  ## Requests and responses  ### Request endpoint All API requests have to be sent to this URL: ``` https://api.printful.com/ ``` If you are using a proxy, make sure that all requests have host header set to **api.printful.com**.  ### Request parameters Some mandatory parameters (like object identifiers) must be included in the request URL path ``` GET /orders/123 ``` Additional parameters can be passed as GET variables: ``` GET /orders?offset=10&limit=5 ``` For POST and PUT requests, a more complex data structure can be passed as JSON encoded data in the request body: ``` POST /orders  {\"recipient\":{...},\"items\":[...]} ```  ### Response body The response body is always a JSON object that contains a response status code (identical to the HTTP status code) and the result of the action. If the status code is 200, then the action was successful. ``` {    \"code\": 200, //Response status code    \"result\":{       //API method return data    //...    } } ```  Sometimes the response includes paging information to allow to browse larger result sets by adding offset and limit GET parameters to the request URL. ``` {    \"code\": 200, //Response status code    \"result\":[     {        //Item 11     },     {        //Item 12     }    ]    \"paging\": {       \"total\": 12,  //Total items available       \"offset\": 10, //Items skipped from the beginning       \"limit\": 20   //Number of items per page    } } ```  ## Error response If the API call is not successful, then the response code is not in the 2xx range and the `result` attribute contains an error description. ``` {     \"code\": 404,     \"result\": \"Not Found\",     \"error\": {         \"reason\": \"NotFound\",         \"message\": \"Not Found\"     } } ```  In general, response codes in the 4xx range indicate an error that resulted from the provided information (e.g. a required parameter was missing, etc.), and codes in the 5xx range indicate an error with Printful's servers.  ### Timestamps All timestamps from the API are returned as integers in UNIX timestamp format.  ### Rate Limits Printful API has a general rate limit of 120 API calls per minute. Additionally, endpoints that perform resource intensive operations (such as mockup generator) have a lower allowed request limit.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 1.0
Contact: devsupport@printful.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0-SNAPSHOT

=end

require 'cgi'

module Printful
  class ReportsAPIClient
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get statistics
    # Returns statistics for specified report types.  You need to specify the report types you want to retrieve in the `report_types` query parameter as a comma-separated list, e.g. `report_types=sales_and_costs,profit`.  **Note**: You cannot get statistics for a period longer than 6 months.  #### Example  To get statistics in the default currency of a store for `sales_and_costs` and `profit` reports for August 2022, you can use the following URL: https://api.printful.com/reports/statistics?report_types=sales_and_costs,profit&date_from=2022-08-01&date_to=2022-08-31.  ### Report types  Currently, the following report types are available:  | Report type                | Description                                              | |----------------------------|----------------------------------------------------------| | `sales_and_costs`          | Detailed information on sales and costs grouped by date. | | `sales_and_costs_summary`  | Short information on sales and costs grouped by date.    | | `printful_costs`           | Amount paid to Printful for fulfillment and shipping.    | | `profit`                   | Profit in the specified period.                          | | `total_paid_orders`        | The number of paid orders in the specified period.       | | `costs_by_amount`          | Information on costs by amount grouped by date.          | | `costs_by_product`         | Information on costs grouped by product.                 | | `costs_by_variant`         | Information on costs grouped by variant.                 | | `average_fulfillment_time` | Average time it took Printful to fulfill Your orders.    |  The response structure for the specific reports is documented in the response schema (`result.store_statistics.[reportName]`). 
    # @param date_from [Date] The beginning of the period to get the statistics from (date in &#x60;Y-m-d&#x60; format).
    # @param date_to [Date] The end of the period to get the statistics from (date in &#x60;Y-m-d&#x60; format).
    # @param report_types [String] A comma-separated list of report types to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @option opts [String] :currency The currency (3-letter code) to return the statistics in. You can also specify &#x60;display_currency&#x60; as the value to get the statistics in the account&#39;s display currency. The store currency will be used by default.
    # @return [GetStatistics200Response]
    def get_statistics(date_from, date_to, report_types, opts = {})
      data, _status_code, _headers = get_statistics_with_http_info(date_from, date_to, report_types, opts)
      data
    end

    # Get statistics
    # Returns statistics for specified report types.  You need to specify the report types you want to retrieve in the &#x60;report_types&#x60; query parameter as a comma-separated list, e.g. &#x60;report_types&#x3D;sales_and_costs,profit&#x60;.  **Note**: You cannot get statistics for a period longer than 6 months.  #### Example  To get statistics in the default currency of a store for &#x60;sales_and_costs&#x60; and &#x60;profit&#x60; reports for August 2022, you can use the following URL: https://api.printful.com/reports/statistics?report_types&#x3D;sales_and_costs,profit&amp;date_from&#x3D;2022-08-01&amp;date_to&#x3D;2022-08-31.  ### Report types  Currently, the following report types are available:  | Report type                | Description                                              | |----------------------------|----------------------------------------------------------| | &#x60;sales_and_costs&#x60;          | Detailed information on sales and costs grouped by date. | | &#x60;sales_and_costs_summary&#x60;  | Short information on sales and costs grouped by date.    | | &#x60;printful_costs&#x60;           | Amount paid to Printful for fulfillment and shipping.    | | &#x60;profit&#x60;                   | Profit in the specified period.                          | | &#x60;total_paid_orders&#x60;        | The number of paid orders in the specified period.       | | &#x60;costs_by_amount&#x60;          | Information on costs by amount grouped by date.          | | &#x60;costs_by_product&#x60;         | Information on costs grouped by product.                 | | &#x60;costs_by_variant&#x60;         | Information on costs grouped by variant.                 | | &#x60;average_fulfillment_time&#x60; | Average time it took Printful to fulfill Your orders.    |  The response structure for the specific reports is documented in the response schema (&#x60;result.store_statistics.[reportName]&#x60;). 
    # @param date_from [Date] The beginning of the period to get the statistics from (date in &#x60;Y-m-d&#x60; format).
    # @param date_to [Date] The end of the period to get the statistics from (date in &#x60;Y-m-d&#x60; format).
    # @param report_types [String] A comma-separated list of report types to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @option opts [String] :currency The currency (3-letter code) to return the statistics in. You can also specify &#x60;display_currency&#x60; as the value to get the statistics in the account&#39;s display currency. The store currency will be used by default.
    # @return [Array<(GetStatistics200Response, Integer, Hash)>] GetStatistics200Response data, response status code and response headers
    def get_statistics_with_http_info(date_from, date_to, report_types, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportsAPIClient.get_statistics ...'
      end
      # verify the required parameter 'date_from' is set
      if @api_client.config.client_side_validation && date_from.nil?
        fail ArgumentError, "Missing the required parameter 'date_from' when calling ReportsAPIClient.get_statistics"
      end
      # verify the required parameter 'date_to' is set
      if @api_client.config.client_side_validation && date_to.nil?
        fail ArgumentError, "Missing the required parameter 'date_to' when calling ReportsAPIClient.get_statistics"
      end
      # verify the required parameter 'report_types' is set
      if @api_client.config.client_side_validation && report_types.nil?
        fail ArgumentError, "Missing the required parameter 'report_types' when calling ReportsAPIClient.get_statistics"
      end
      # resource path
      local_var_path = '/reports/statistics'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'date_from'] = date_from
      query_params[:'date_to'] = date_to
      query_params[:'report_types'] = report_types
      query_params[:'currency'] = opts[:'currency'] if !opts[:'currency'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-PF-Store-Id'] = opts[:'x_pf_store_id'] if !opts[:'x_pf_store_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStatistics200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"ReportsAPIClient.get_statistics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportsAPIClient#get_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
