=begin
#API Documentation | Printful

## About the Printful API  The Printful API is a RESTful API, that uses an HTTP protocol for communication. HTTP GET, POST, PUT and DELETE methods are used to access the API resources.  ## Requests and responses  ### Request endpoint All API requests have to be sent to this URL: ``` https://api.printful.com/ ``` If you are using a proxy, make sure that all requests have host header set to **api.printful.com**.  ### Request parameters Some mandatory parameters (like object identifiers) must be included in the request URL path ``` GET /orders/123 ``` Additional parameters can be passed as GET variables: ``` GET /orders?offset=10&limit=5 ``` For POST and PUT requests, a more complex data structure can be passed as JSON encoded data in the request body: ``` POST /orders  {\"recipient\":{...},\"items\":[...]} ```  ### Response body The response body is always a JSON object that contains a response status code (identical to the HTTP status code) and the result of the action. If the status code is 200, then the action was successful. ``` {    \"code\": 200, //Response status code    \"result\":{       //API method return data    //...    } } ```  Sometimes the response includes paging information to allow to browse larger result sets by adding offset and limit GET parameters to the request URL. ``` {    \"code\": 200, //Response status code    \"result\":[     {        //Item 11     },     {        //Item 12     }    ]    \"paging\": {       \"total\": 12,  //Total items available       \"offset\": 10, //Items skipped from the beginning       \"limit\": 20   //Number of items per page    } } ```  ## Error response If the API call is not successful, then the response code is not in the 2xx range and the `result` attribute contains an error description. ``` {     \"code\": 404,     \"result\": \"Not Found\",     \"error\": {         \"reason\": \"NotFound\",         \"message\": \"Not Found\"     } } ```  In general, response codes in the 4xx range indicate an error that resulted from the provided information (e.g. a required parameter was missing, etc.), and codes in the 5xx range indicate an error with Printful's servers.  ### Timestamps All timestamps from the API are returned as integers in UNIX timestamp format.  ### Rate Limits Printful API has a general rate limit of 120 API calls per minute. Additionally, endpoints that perform resource intensive operations (such as mockup generator) have a lower allowed request limit.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 1.0
Contact: devsupport@printful.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0-SNAPSHOT

=end

require 'cgi'

module Printful
  class MockupGeneratorAPIClient
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a mockup generation task
    # Creates an asynchronous mockup generation task. Generation result can be retrieved using mockup generation task retrieval endpoint.<br> **Rate limiting**: Up to 10 requests per 60 seconds for established stores; 2 requests per 60 seconds for new stores. Currently available rate is returned in response headers. A 60 seconds lockout is applied if request count is exceeded. We also limit the number of files that may be generated to 20,000 files per account in a 24-hour period. 
    # @param id [Integer] Product ID.
    # @param create_generation_task [CreateGenerationTask] POST request body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @return [CreateGeneratorTask200Response]
    def create_generator_task(id, create_generation_task, opts = {})
      data, _status_code, _headers = create_generator_task_with_http_info(id, create_generation_task, opts)
      data
    end

    # Create a mockup generation task
    # Creates an asynchronous mockup generation task. Generation result can be retrieved using mockup generation task retrieval endpoint.&lt;br&gt; **Rate limiting**: Up to 10 requests per 60 seconds for established stores; 2 requests per 60 seconds for new stores. Currently available rate is returned in response headers. A 60 seconds lockout is applied if request count is exceeded. We also limit the number of files that may be generated to 20,000 files per account in a 24-hour period. 
    # @param id [Integer] Product ID.
    # @param create_generation_task [CreateGenerationTask] POST request body
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @return [Array<(CreateGeneratorTask200Response, Integer, Hash)>] CreateGeneratorTask200Response data, response status code and response headers
    def create_generator_task_with_http_info(id, create_generation_task, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MockupGeneratorAPIClient.create_generator_task ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MockupGeneratorAPIClient.create_generator_task"
      end
      # verify the required parameter 'create_generation_task' is set
      if @api_client.config.client_side_validation && create_generation_task.nil?
        fail ArgumentError, "Missing the required parameter 'create_generation_task' when calling MockupGeneratorAPIClient.create_generator_task"
      end
      # resource path
      local_var_path = '/mockup-generator/create-task/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-PF-Store-Id'] = opts[:'x_pf_store_id'] if !opts[:'x_pf_store_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_generation_task)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGeneratorTask200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"MockupGeneratorAPIClient.create_generator_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MockupGeneratorAPIClient#create_generator_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve product variant printfiles
    # List of printfiles available for products variants. Printfile indicates what file resolution should be used to create a mockup or submit an order.  <div class=\"alert alert-info\"> This endpoint uses DTG as a default printing technique for products with more than one technique available. For products with DTG and more techniques available please specify the correct technique in query by using the `technique` parameter. For more information read the <a href=\"#section/Mockup-Generator-API-examples\">examples</a>. </div> 
    # @param id [Integer] Product ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orientation 
    # @option opts [String] :technique 
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @return [GetPrintfiles200Response]
    def get_printfiles(id, opts = {})
      data, _status_code, _headers = get_printfiles_with_http_info(id, opts)
      data
    end

    # Retrieve product variant printfiles
    # List of printfiles available for products variants. Printfile indicates what file resolution should be used to create a mockup or submit an order.  &lt;div class&#x3D;\&quot;alert alert-info\&quot;&gt; This endpoint uses DTG as a default printing technique for products with more than one technique available. For products with DTG and more techniques available please specify the correct technique in query by using the &#x60;technique&#x60; parameter. For more information read the &lt;a href&#x3D;\&quot;#section/Mockup-Generator-API-examples\&quot;&gt;examples&lt;/a&gt;. &lt;/div&gt; 
    # @param id [Integer] Product ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orientation 
    # @option opts [String] :technique 
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @return [Array<(GetPrintfiles200Response, Integer, Hash)>] GetPrintfiles200Response data, response status code and response headers
    def get_printfiles_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MockupGeneratorAPIClient.get_printfiles ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MockupGeneratorAPIClient.get_printfiles"
      end
      allowable_values = ["horizontal", "vertical"]
      if @api_client.config.client_side_validation && opts[:'orientation'] && !allowable_values.include?(opts[:'orientation'])
        fail ArgumentError, "invalid value for \"orientation\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mockup-generator/printfiles/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'orientation'] = opts[:'orientation'] if !opts[:'orientation'].nil?
      query_params[:'technique'] = opts[:'technique'] if !opts[:'technique'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-PF-Store-Id'] = opts[:'x_pf_store_id'] if !opts[:'x_pf_store_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPrintfiles200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"MockupGeneratorAPIClient.get_printfiles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MockupGeneratorAPIClient#get_printfiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mockup generation task result
    # Returns asynchronous mockup generation task result. If generation task is completed, it will contain a list of generated mockups.
    # @param task_key [String] Task key retrieved when creating the generation task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @return [CreateGeneratorTask200Response]
    def get_task(task_key, opts = {})
      data, _status_code, _headers = get_task_with_http_info(task_key, opts)
      data
    end

    # Mockup generation task result
    # Returns asynchronous mockup generation task result. If generation task is completed, it will contain a list of generated mockups.
    # @param task_key [String] Task key retrieved when creating the generation task.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @return [Array<(CreateGeneratorTask200Response, Integer, Hash)>] CreateGeneratorTask200Response data, response status code and response headers
    def get_task_with_http_info(task_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MockupGeneratorAPIClient.get_task ...'
      end
      # verify the required parameter 'task_key' is set
      if @api_client.config.client_side_validation && task_key.nil?
        fail ArgumentError, "Missing the required parameter 'task_key' when calling MockupGeneratorAPIClient.get_task"
      end
      # resource path
      local_var_path = '/mockup-generator/task'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'task_key'] = task_key

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-PF-Store-Id'] = opts[:'x_pf_store_id'] if !opts[:'x_pf_store_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGeneratorTask200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"MockupGeneratorAPIClient.get_task",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MockupGeneratorAPIClient#get_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Layout templates
    # Retrieve list of templates that can be used for client-side positioning.  <div class=\"alert alert-info\"> This endpoint uses DTG as a default printing technique for product layouts with more than one technique available. For products with DTG and more techniques available please specify the correct technique in query by using the `technique` parameter. For more information read the <a href=\"#section/Mockup-Generator-API-examples\">examples</a>. </div> 
    # @param id [Integer] Product ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orientation 
    # @option opts [String] :technique 
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @return [GetTemplates200Response]
    def get_templates(id, opts = {})
      data, _status_code, _headers = get_templates_with_http_info(id, opts)
      data
    end

    # Layout templates
    # Retrieve list of templates that can be used for client-side positioning.  &lt;div class&#x3D;\&quot;alert alert-info\&quot;&gt; This endpoint uses DTG as a default printing technique for product layouts with more than one technique available. For products with DTG and more techniques available please specify the correct technique in query by using the &#x60;technique&#x60; parameter. For more information read the &lt;a href&#x3D;\&quot;#section/Mockup-Generator-API-examples\&quot;&gt;examples&lt;/a&gt;. &lt;/div&gt; 
    # @param id [Integer] Product ID.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :orientation 
    # @option opts [String] :technique 
    # @option opts [String] :x_pf_store_id Use this to specify which store you want to use (required only for account level token)
    # @return [Array<(GetTemplates200Response, Integer, Hash)>] GetTemplates200Response data, response status code and response headers
    def get_templates_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MockupGeneratorAPIClient.get_templates ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MockupGeneratorAPIClient.get_templates"
      end
      allowable_values = ["horizontal", "vertical"]
      if @api_client.config.client_side_validation && opts[:'orientation'] && !allowable_values.include?(opts[:'orientation'])
        fail ArgumentError, "invalid value for \"orientation\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mockup-generator/templates/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'orientation'] = opts[:'orientation'] if !opts[:'orientation'].nil?
      query_params[:'technique'] = opts[:'technique'] if !opts[:'technique'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-PF-Store-Id'] = opts[:'x_pf_store_id'] if !opts[:'x_pf_store_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTemplates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['OAuth']

      new_options = opts.merge(
        :operation => :"MockupGeneratorAPIClient.get_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MockupGeneratorAPIClient#get_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
