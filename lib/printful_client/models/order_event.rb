=begin
#API Documentation | Printful

## About the Printful API  The Printful API is a RESTful API, that uses an HTTP protocol for communication. HTTP GET, POST, PUT and DELETE methods are used to access the API resources.  ## Requests and responses  ### Request endpoint All API requests have to be sent to this URL: ``` https://api.printful.com/ ``` If you are using a proxy, make sure that all requests have host header set to **api.printful.com**.  ### Request parameters Some mandatory parameters (like object identifiers) must be included in the request URL path ``` GET /orders/123 ``` Additional parameters can be passed as GET variables: ``` GET /orders?offset=10&limit=5 ``` For POST and PUT requests, a more complex data structure can be passed as JSON encoded data in the request body: ``` POST /orders  {\"recipient\":{...},\"items\":[...]} ```  ### Response body The response body is always a JSON object that contains a response status code (identical to the HTTP status code) and the result of the action. If the status code is 200, then the action was successful. ``` {    \"code\": 200, //Response status code    \"result\":{       //API method return data    //...    } } ```  Sometimes the response includes paging information to allow to browse larger result sets by adding offset and limit GET parameters to the request URL. ``` {    \"code\": 200, //Response status code    \"result\":[     {        //Item 11     },     {        //Item 12     }    ]    \"paging\": {       \"total\": 12,  //Total items available       \"offset\": 10, //Items skipped from the beginning       \"limit\": 20   //Number of items per page    } } ```  ## Error response If the API call is not successful, then the response code is not in the 2xx range and the `result` attribute contains an error description. ``` {     \"code\": 404,     \"result\": \"Not Found\",     \"error\": {         \"reason\": \"NotFound\",         \"message\": \"Not Found\"     } } ```  In general, response codes in the 4xx range indicate an error that resulted from the provided information (e.g. a required parameter was missing, etc.), and codes in the 5xx range indicate an error with Printful's servers.  ### Timestamps All timestamps from the API are returned as integers in UNIX timestamp format.  ### Rate Limits Printful API has a general rate limit of 120 API calls per minute. Additionally, endpoints that perform resource intensive operations (such as mockup generator) have a lower allowed request limit.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

The version of the OpenAPI document: 1.0
Contact: devsupport@printful.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.0-SNAPSHOT

=end

require 'date'
require 'time'

module Printful
  class OrderEvent
    attr_accessor :id

    attr_accessor :external_id

    attr_accessor :store

    attr_accessor :status

    attr_accessor :shipping

    attr_accessor :shipping_service_name

    attr_accessor :created

    attr_accessor :updated

    attr_accessor :recipient

    attr_accessor :items

    attr_accessor :branding_items

    attr_accessor :incomplete_items

    attr_accessor :costs

    attr_accessor :retail_costs

    attr_accessor :pricing_breakdown

    attr_accessor :shipments

    attr_accessor :gift

    attr_accessor :packing_slip

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'external_id' => :'external_id',
        :'store' => :'store',
        :'status' => :'status',
        :'shipping' => :'shipping',
        :'shipping_service_name' => :'shipping_service_name',
        :'created' => :'created',
        :'updated' => :'updated',
        :'recipient' => :'recipient',
        :'items' => :'items',
        :'branding_items' => :'branding_items',
        :'incomplete_items' => :'incomplete_items',
        :'costs' => :'costs',
        :'retail_costs' => :'retail_costs',
        :'pricing_breakdown' => :'pricing_breakdown',
        :'shipments' => :'shipments',
        :'gift' => :'gift',
        :'packing_slip' => :'packing_slip'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'external_id' => :'Object',
        :'store' => :'Object',
        :'status' => :'Object',
        :'shipping' => :'Object',
        :'shipping_service_name' => :'Object',
        :'created' => :'Object',
        :'updated' => :'Object',
        :'recipient' => :'Object',
        :'items' => :'Object',
        :'branding_items' => :'Object',
        :'incomplete_items' => :'Object',
        :'costs' => :'Object',
        :'retail_costs' => :'Object',
        :'pricing_breakdown' => :'Object',
        :'shipments' => :'Object',
        :'gift' => :'Object',
        :'packing_slip' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'id',
        :'external_id',
        :'store',
        :'status',
        :'shipping',
        :'shipping_service_name',
        :'created',
        :'updated',
        :'recipient',
        :'items',
        :'branding_items',
        :'incomplete_items',
        :'costs',
        :'retail_costs',
        :'pricing_breakdown',
        :'shipments',
        :'gift',
        :'packing_slip'
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Order'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Printful::OrderEvent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Printful::OrderEvent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'store')
        self.store = attributes[:'store']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'shipping')
        self.shipping = attributes[:'shipping']
      end

      if attributes.key?(:'shipping_service_name')
        self.shipping_service_name = attributes[:'shipping_service_name']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'recipient')
        self.recipient = attributes[:'recipient']
      else
        self.recipient = nil
      end

      if attributes.key?(:'items')
        self.items = attributes[:'items']
      else
        self.items = nil
      end

      if attributes.key?(:'branding_items')
        self.branding_items = attributes[:'branding_items']
      end

      if attributes.key?(:'incomplete_items')
        self.incomplete_items = attributes[:'incomplete_items']
      end

      if attributes.key?(:'costs')
        self.costs = attributes[:'costs']
      end

      if attributes.key?(:'retail_costs')
        self.retail_costs = attributes[:'retail_costs']
      end

      if attributes.key?(:'pricing_breakdown')
        self.pricing_breakdown = attributes[:'pricing_breakdown']
      end

      if attributes.key?(:'shipments')
        self.shipments = attributes[:'shipments']
      end

      if attributes.key?(:'gift')
        self.gift = attributes[:'gift']
      end

      if attributes.key?(:'packing_slip')
        self.packing_slip = attributes[:'packing_slip']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          external_id == o.external_id &&
          store == o.store &&
          status == o.status &&
          shipping == o.shipping &&
          shipping_service_name == o.shipping_service_name &&
          created == o.created &&
          updated == o.updated &&
          recipient == o.recipient &&
          items == o.items &&
          branding_items == o.branding_items &&
          incomplete_items == o.incomplete_items &&
          costs == o.costs &&
          retail_costs == o.retail_costs &&
          pricing_breakdown == o.pricing_breakdown &&
          shipments == o.shipments &&
          gift == o.gift &&
          packing_slip == o.packing_slip
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, external_id, store, status, shipping, shipping_service_name, created, updated, recipient, items, branding_items, incomplete_items, costs, retail_costs, pricing_breakdown, shipments, gift, packing_slip].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Printful.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
